#!/usr/bin/env python3

import json
import locale
import sys
import operator
import os
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, Image, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.piecharts import Pie
import emails

def load_data(filename):
    '''Loads the contents of filename as a JSON file.'''
    with open(filename, encoding = 'utf-8') as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    '''Given a car dictionary, returns a nicely formatted name.'''
    return '{} {} ({})'.format(car['car_make'], car['car_model'], car['car_year'])


def process_data(data):
    '''Analyzes the data, looking for maximums.
    Returns a list of lines that summarize the information.
    '''
    max_revenue = {'revenue': 0}
    max_sales = {'total_sales': 0}
    year_dict = {}
    car_make_dict = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item['price'].strip('$'))
        item_revenue = item['total_sales'] * item_price
        if item_revenue > max_revenue['revenue']:
            item['revenue'] = item_revenue
            max_revenue = item
        # Calculate max sales
        if item['total_sales'] > max_sales['total_sales']:
            max_sales = item

        # Create dictionary with years: total_sales pair
        # Using 'car_year' as key
        key_year = item['car']['car_year']
        # Using 'total_sales' as values
        value_year = item['total_sales']
        # Populate dictionary
        if key_year not in year_dict:
            year_dict[key_year] = []
        year_dict[key_year].append(value_year)

        # Create dictionary with car_make: total_sales pair
        # Using 'car_make' as key
        key_car_make = item['car']['car_make']
        # Using 'total_sales' as values
        value_car_make = item['total_sales']
        # Populate dictionary
        if key_car_make not in car_make_dict:
            car_make_dict[key_car_make] = []
        car_make_dict[key_car_make].append(value_car_make)

    # Create sorted dictionary to calculate year with most total sales
    year_sum = dict([(key_year, sum(value_year)) for key_year, value_year in year_dict.items()])
    year_sum_sorted = sorted(year_sum.items(), key=lambda x:x[1], reverse=True)
    # Create sorted dictionary to calculate car_make with most sales over the years - will be used in pie chart 
    car_make_sum = dict([(key_car_make, sum(value_car_make)) for key_car_make, value_car_make in car_make_dict.items()])
    car_make_sum_sorted = dict(sorted(car_make_sum.items(), key=lambda x:x[1], reverse=True))
    # Create list of summary information - will be used in summary-paragraph part of the pdf-document
    summary = [
        'The {} generated the most revenue: ${}'.format(format_car(max_revenue['car']), max_revenue['revenue']), 
        'The {} had the most sales: {}'.format(format_car(max_sales['car']), max_sales['total_sales']),
        'The most popular year was {} with {} sales'.format(year_sum_sorted[0][0], year_sum_sorted[0][1]),
    ]
    
    return summary, car_make_sum_sorted


def cars_dict_to_table(car_data):
    '''Turns the data in car_data into a list of lists.'''
    table_data = [['ID', 'Car', 'Price', 'Total Sales']]
    for item in car_data:
        table_data.append([item['id'], format_car(item['car']), item['price'], item['total_sales']])
    # sort data excluding first row as a header and using third column to sort values
    table_data_sorted = [table_data[0]] + sorted(table_data[1:], key=lambda x:x[3], reverse=True)
    return table_data_sorted


def main(argv):
    '''Process the JSON data and generate a full report out of it.'''
    data = load_data('car_sales.json')
    summary = process_data(data)[0] # Using only first `return value` of the function
    car_make_sum_sorted = process_data(data)[1]
    print('Summary paragraph to be printed in pdf document:', summary)
    print()
    print('Data to be shown in thje pie chart consists of:', car_make_sum_sorted)

    # Set PDF settings
    # Path to save .pdf file
    pdf_save_path = '/tmp/cars.pdf'
    # Instantiate style of pdf document
    styles = getSampleStyleSheet()
    # Initialize report to be printed in pdf document
    report = SimpleDocTemplate(pdf_save_path)
    # Set title to the document
    report_title = Paragraph('Sales summary for last month', styles['h1'])
    # Set table style to the data in table format
    table_style = [('GRID', (0,0), (-1,-1), 1, colors.black),
                   ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
                   ('ALIGN', (0,0), (-1,-1), 'CENTER')]
    # Insert table to the document
    report_table = Table(data = cars_dict_to_table(data), style = table_style,  hAlign = 'CENTER')
    # Add summary paragraph to the document
    paragraph_style = ParagraphStyle('custom',
                                     fontSize=12)
    summary_paragraph = Paragraph('<br/>'.join(summary), paragraph_style) # using <br/> to divide element of the 'summary' list
    # Add empty line to separate objects in the report
    empty_line = Spacer(1,20)
    # Add pie chart variable to use in the document
    report_pie = Pie()
    # Instantiate two separate lists: one for data, and one for labels.
    report_pie.data = []
    report_pie.labels = []
    report_pie.x = 65
    report_pie.y = -150
    report_pie.width = 250
    report_pie.height = 250
    report_pie.slices.strokeWidth = 0.8
    report_pie.slices.labelRadius = 1.25
    report_pie.sideLabels = True
    report_pie.checkLabelOverlap = True
    # Use `process_data` function to return sorted dictionary of `car_make`-`total_sales` pair
    car_make_sum_sorted = process_data(data)[1]
    for key, value in car_make_sum_sorted.items():
        report_pie.labels.append(key)
        report_pie.data.append(value)
    # Instantiate report chart variable to use in the document
    report_chart = Drawing()
    # Add Pie Chart to the report
    report_chart.add(report_pie)
    
    # Build the report
    report.build([report_title, empty_line, summary_paragraph, empty_line, report_table, empty_line, report_chart])
    
    # Send the PDF report as an email attachment
    sender = 'automation@example.com'
    recipient = 'student@example.com'
    subject = 'Sales summary for last month'
    body = '\n'.join(summary)
    attachment_path = pdf_save_path
    message = emails.generate(sender, recipient, subject, body, attachment_path)
    emails.send(message)

if __name__ == '__main__':
    main(sys.argv)